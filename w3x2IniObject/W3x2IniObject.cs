using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;

namespace AzerothWarsMapCompiler
{
  /// <summary>
  /// Describes the contents of a .ini file as generated by w3x2lni.
  /// </summary>
  class W3x2LniObject
  {
    private readonly Dictionary<string, string> _fields = new Dictionary<string, string>();

    public string Id { get; }
    public string FileContents { get; private set; }
    public string FilePath { get; }

    /// <summary>
    /// Saves all Lni objects in a collection to a new text .ini file.
    /// This text file can be converted by w3x2lni to a real objects file.
    /// </summary>
    /// <param name="objects"></param>
    /// <param name="filePath"></param>
    public static void SaveObjectsToFile(Dictionary<string, W3x2LniObject> objects, string filePath)
    {
      if (objects.Count == 0)
      {
        File.Delete(filePath);
        return;
      }

      Directory.CreateDirectory(Path.GetDirectoryName(filePath));
      var newFileContents = new StringBuilder();
      foreach (var lniObject in objects.Values)
      {
        newFileContents.Append(lniObject.FileContents);
      }
      File.Create(filePath).Close();
      File.WriteAllText(filePath, newFileContents.ToString());
    }

    /// <summary>
    /// Saves all Lni objects in a list collection to an array of provided directories.
    /// Each object is a seperate file.
    /// Objects will prefer being saved to existing files, but will default to the first directory provided otherwise.
    /// Files for objects which do not exist in the map will be deleted.
    /// </summary>
    /// <param name="objects"></param>
    /// <param name="directoryPath"></param>
    /// <param name="existingObjects"<>/param>
    public static void SaveObjectsToDirectories(Dictionary<string, W3x2LniObject> objects, string[] directoryPaths)
    {
      Directory.CreateDirectory(directoryPaths[0]);
      var existingObjects = CreateObjectsFromDirectories(directoryPaths);
      var savedFileNames = new List<string>(); //Keep a record of saved files so we can delete everything else

      foreach (var lniObject in objects.Values)
      {
        //If there is already a file with an Id matching an export, print straight to that file
        if (existingObjects.ContainsKey(lniObject.Id))
        {
          var matchingObject = existingObjects[lniObject.Id];
          savedFileNames.Add(matchingObject.FilePath);
          if (matchingObject.FileContents != lniObject.FileContents)
          {
            File.WriteAllText(matchingObject.FilePath, lniObject.FileContents);
          }
          
        }
        else
        {
          //If there isn't, create a new file
          var newDirectoryPath = directoryPaths[0] + lniObject.SuggestedDirectoryPath;
          string newFilePath;
          if (File.Exists(lniObject.SuggestedFileName))
          {
            newFilePath = newDirectoryPath + lniObject.Id + ".ini";
          } else
          {
            newFilePath = newDirectoryPath + lniObject.SuggestedFileName + ".ini";
          } 
          Directory.CreateDirectory(newDirectoryPath);
          File.Create(newFilePath).Close();
          File.WriteAllText(newFilePath, lniObject.FileContents);
          savedFileNames.Add(newFilePath);
        }
      }

      //Delete files which are not amongst those being exported
      foreach (var existingObject in existingObjects)
      {
        var existingObjectFilePath = existingObject.Value.FilePath;
        if (!savedFileNames.Contains(existingObjectFilePath))
        {
          File.Delete(existingObjectFilePath);
        }
      }
    }

    /// <summary>
    /// Reads every .ini file in all given directories and its subdirectories and produces a collection of W3x2Lni objects.
    /// </summary>
    /// <param name="directoryPath"></param>
    /// <returns></returns>
    public static Dictionary<string, W3x2LniObject> CreateObjectsFromDirectories(string[] directoryPaths)
    {
      var objects = new Dictionary<string, W3x2LniObject>();
      foreach (var directoryPath in directoryPaths)
      {
        {
          Directory.CreateDirectory(directoryPath);
          string[] alljfilesindirectory = Directory.GetFiles(directoryPath, "*.ini", SearchOption.AllDirectories);
          {
            for (int i = 0; i < alljfilesindirectory.Length; i++)
            {
              using StreamReader reader = File.OpenText(alljfilesindirectory[i]);
              var newObject = new W3x2LniObject(reader.ReadToEnd(), alljfilesindirectory[i]);
              objects.Add(newObject.Id, newObject);
            }
          }
        }
      }
      return objects;
    }

    /// <summary>
    /// Reads every .ini file in a given directory and its subdirectories and producing a collection of W3x2Lni objects.
    /// </summary>
    /// <param name="directoryPath"></param>
    /// <returns></returns>
    public static Dictionary<string, W3x2LniObject> CreateObjectsFromDirectory(string directoryPath)
    {
      var objects = new Dictionary<string, W3x2LniObject>();
      using StringWriter writer = new StringWriter();
      string[] alljfilesindirectory = Directory.GetFiles(directoryPath, "*.ini", SearchOption.AllDirectories);
      {
        for (int i = 0; i < alljfilesindirectory.Length; i++)
        {
          using StreamReader reader = File.OpenText(alljfilesindirectory[i]);
          var newObject = new W3x2LniObject(reader.ReadToEnd(), alljfilesindirectory[i]);
          objects.Add(newObject.Id, newObject);
        }
      }
      return objects;
    }

    /// <summary>
    /// Reads every line in a given .ini file and returns a list of all W3x2Lni objects found.
    /// </summary>
    /// <param name="filePath"></param>
    /// <returns></returns>
    public static Dictionary<string, W3x2LniObject> CreateObjectsFromFile(string filePath)
    {
      Dictionary<string, W3x2LniObject> objectList = new Dictionary<string, W3x2LniObject>();
      var isHeader = new Regex(@"^\[.*?\]$");

      //Populate a list with all w3x2lni objects found in the provided file
      using StreamReader sourceFile = new StreamReader(filePath);
      string line;
      string currentFileContents = null; //The contents of a new file being created
      bool atStartOfFile = true; //Don't want to save as soon as we hit the object header at the start of the file
      while (true)
      {
        line = sourceFile.ReadLine();
        if (line == null || (isHeader.IsMatch(line) && !atStartOfFile)) //Start of a new object, so save all previous lines into an object
        {
          var newObject = new W3x2LniObject(currentFileContents);
          objectList.Add(newObject.Id, newObject);
          currentFileContents = null;
        }
        atStartOfFile = false;
        currentFileContents += line + "\r\n";
        if (line == null)
        {
          break;
        }
      }
      return objectList;
    }

    public string SuggestedDirectoryPath
    {
      get
      {
        if (_fields.ContainsKey("EditorSuffix"))
        {
          string pathPrefix = _fields["EditorSuffix"];
          pathPrefix = pathPrefix.Split(new char[] { ' ','-' })[0];
          return Regex.Replace(pathPrefix, "[^a-zA-Z0-9]", "") + "/";
        }
        return "";
      }
    }

    public string SuggestedFileName
    {
     get
      {
        string fileName;
        if (_fields.ContainsKey("Name"))
        {
          fileName = _fields["Name"];
        } else if (_fields.ContainsKey("Bufftip"))
        {
          fileName = _fields["Bufftip"];
        } else
        {
          fileName = Id;
        }
        var cleanedFileName = Regex.Replace(fileName, "[^a-zA-Z0-9]", "");    
        return cleanedFileName;
      }
    }

    public void RegenerateFileContents()
    {
      var stringBuilder = new StringBuilder();
      stringBuilder.Append("[" + Id + "]" + Environment.NewLine);
      foreach (KeyValuePair<string, string> entry in _fields)
      {
        stringBuilder.Append(entry.Key + " = " + entry.Value + Environment.NewLine);
      }
      stringBuilder.Append(Environment.NewLine + Environment.NewLine);
      FileContents = stringBuilder.ToString();
    }

    public void SetFieldValue(string field, string value)
    {
      _fields[field] = value;
    }

    public string GetFieldValue(string field)
    {
      return _fields[field];
    }

    public W3x2LniObject(string fileContents, string filePath = null){
      FilePath = filePath;
      var isId = new Regex(@"^\[.*?\]$");
      FileContents = fileContents;
      string line;
      using StringReader strReader = new StringReader(fileContents);
      var rowIndex = 0;
      while ((line = strReader.ReadLine()) != null)
      {
        //Find Id line surrounded by square brackets
        if (isId.IsMatch(line))
        {
          Id = line[1..^1];
        }
        else if (line.Contains(" = "))
        {
          var split = line.Split(" = ");
          var key = split[0].Replace("\"", "");
          var value = split[1];
          _fields[key] = value;
        }
        if (Id == null)
        {
          throw new Exception("Expected non-null Id in file");
        }
        rowIndex++;
      }
    }
  }
}