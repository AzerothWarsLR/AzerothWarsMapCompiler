using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;

namespace AzerothWarsMapCompiler
{
  /// <summary>
  /// Describes the contents of a .lni file as generated by w3x2lni.
  /// </summary>
  class W3x2LniObject
  {
    private Dictionary<string, string> _fields = new Dictionary<string, string>();

    public string Id { get; }
    public string FileContents { get; }
    public string FilePath { get; }

    public static string ProgramDirectory
    {
      get
      {
        return @"E:\Users\Zak\Documents\YakaryBovineMaps\AzerothWarsLR\buildTools\w3x2lni_enUS_v2.7.2\";
      }
    }

    /// <summary>
    /// Saves all Lni objects in a collection to a new text .lni file.
    /// This text file can be converted by w3x2lni to a real objects file.
    /// </summary>
    /// <param name="objects"></param>
    /// <param name="filePath"></param>
    public static void SaveObjectsToFile(Dictionary<string, W3x2LniObject> objects, string filePath)
    {
      Directory.CreateDirectory(Path.GetDirectoryName(filePath));
      var newFileContents = new StringBuilder();
      foreach (var lniObject in objects.Values)
      {
        newFileContents.Append(lniObject.FileContents);
      }
      File.Create(filePath).Close();
      File.WriteAllText(filePath, newFileContents.ToString());
    }

    /// <summary>
    /// Saves all Lni objects in a list collection to a provided directory.
    /// Each object is a seperate file.
    /// </summary>
    /// <param name="objects"></param>
    /// <param name="directoryPath"></param>
    /// <param name="existingObjects"<>/param>
    public static void SaveObjectsToDirectory(Dictionary<string, W3x2LniObject> objects, string directoryPath)
    {
      Directory.CreateDirectory(directoryPath);
      var existingObjects = CreateObjectsFromDirectory(directoryPath);

      foreach (var lniObject in objects.Values)
      {
        //If there is already a file with an Id matching an export, print straight to that file
        if (existingObjects.ContainsKey(lniObject.Id))
        {
          var matchingObject = existingObjects[lniObject.Id];
          File.WriteAllText(matchingObject.FilePath, lniObject.FileContents);
        } else
        {
          //If there isn't, create a new file
          var newDirectoryPath = directoryPath + lniObject.SuggestedDirectoryPath;
          var newFilePath = newDirectoryPath + lniObject.SuggestedFileName + ".lni";
          Directory.CreateDirectory(newDirectoryPath);
          File.Create(newFilePath).Close();
          File.WriteAllText(newFilePath, lniObject.FileContents);
        } 
      }
    }

    /// <summary>
    /// Reads every .lni file in a given directory and its subdirectories and producing a collection of W3x2Lni objects.
    /// </summary>
    /// <param name="directoryPath"></param>
    /// <returns></returns>
    public static Dictionary<string, W3x2LniObject> CreateObjectsFromDirectory(string directoryPath)
    {
      var objects = new Dictionary<string, W3x2LniObject>();
      using (StringWriter writer = new StringWriter())
      {
        string[] alljfilesindirectory = Directory.GetFiles(directoryPath, "*.lni", SearchOption.AllDirectories);
        {
          for (int i = 0; i < alljfilesindirectory.Length; i++)
          {
            using StreamReader reader = File.OpenText(alljfilesindirectory[i]);
            var newObject = new W3x2LniObject(reader.ReadToEnd(), alljfilesindirectory[i]);
            objects.Add(newObject.Id, newObject);
          }
        }
        return objects;
      }
    }

    /// <summary>
    /// Reads every line in a given .lni file and returns a list of all W3x2Lni objects found.
    /// </summary>
    /// <param name="filePath"></param>
    /// <returns></returns>
    public static Dictionary<string, W3x2LniObject> CreateObjectsFromFile(string filePath)
    {
      Dictionary<string, W3x2LniObject> objectList = new Dictionary<string, W3x2LniObject>();
      StreamReader sourceFile = new StreamReader(filePath);
      var isHeader = new Regex(@"^\[.*?\]$");

      //Populate a list with all w3x2lni objects found in the provided file
      string line;
      string currentFileContents = null; //The contents of a new file being created
      bool atStartOfFile = true; //Don't want to save as soon as we hit the object header at the start of the file
      while ((line = sourceFile.ReadLine()) != null)
      {
        if (isHeader.IsMatch(line) & !atStartOfFile) //Start of a new object, so save all previous lines into an object
        {
          var newObject = new W3x2LniObject(currentFileContents);
          objectList.Add(newObject.Id, newObject);
          currentFileContents = null;
        }
        atStartOfFile = false;
        currentFileContents += line + "\r\n";
      }
      return objectList;
    }

    public string SuggestedDirectoryPath
    {
      get
      {
        if (_fields.ContainsKey("EditorSuffix"))
        {
          string pathPrefix = _fields["EditorSuffix"];
          pathPrefix = pathPrefix.Split(new char[] { ' ','-' })[0];
          return Regex.Replace(pathPrefix, "[^a-zA-Z0-9]", "") + "/";
        }
        return "";
      }
    }

    public string SuggestedFileName
    {
     get
      {
        string fileName;
        if (_fields.ContainsKey("Name"))
        {
          fileName = _fields["Name"];
        } else
        {
          fileName = Id;
        }
        var cleanedFileName = Regex.Replace(fileName, "[^a-zA-Z0-9]", "");    
        return cleanedFileName;
      }
    }

    public string GetFieldValue(string field)
    {
      return _fields[field];
    }

    public W3x2LniObject(string fileContents, string filePath = null){
      FilePath = filePath;
      var isId = new Regex(@"^\[.*?\]$");
      FileContents = fileContents;
      string line;
      StringReader strReader = new StringReader(fileContents);
      while ((line = strReader.ReadLine()) != null)
      {
        //Find Id line surrounded by square brackets
        if (isId.IsMatch(line))
        {
          Id = line[1..^1];
        }
        else if (line.Contains(" = "))
        {
          var split = line.Split(" = ");
          var key = split[0].Replace("\"", "");
          var value = split[1].Replace("\"", "");
          _fields[key] = value;
        }
        if (Id == null)
        {
          throw new Exception("Expected non-null Id in file");
        }
      }
    }
  }
}